class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        int n = nums.length;
        if (n < 4) {
            return ans;
        }
        
        Arrays.sort(nums);
        
        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            
            long min_i = (long) nums[i] + nums[i+1] + nums[i+2] + nums[i+3];
            if (min_i > target) break;
            
            long max_i = (long) nums[i] + nums[n-1] + nums[n-2] + nums[n-3];
            if (max_i < target) continue;
            
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;
                
                long min_j = (long) nums[i] + nums[j] + nums[j+1] + nums[j+2];
                if (min_j > target) break;
                
                long max_j = (long) nums[i] + nums[j] + nums[n-1] + nums[n-2];
                if (max_j < target) continue;
                
                int left = j + 1;
                int right = n - 1;
                while (left < right) {
                    long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum < target) left++;
                    else if (sum > target) right--;
                    else {
                        ans.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                        while (left < right && nums[left] == nums[left + 1]) left++;
                        while (left < right && nums[right] == nums[right - 1]) right--;
                        left++;
                        right--;
                    }
                }
            }
        }
        return ans;
    }
}

